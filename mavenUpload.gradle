apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

publishing {
    publications {
        maven(MavenPublication) {

            groupId = POM_GROUP
            artifactId = project.getName()
            version = VERSION_NAME

            artifact(sourcesJar)
            artifact(javadocJar)
            if (project.hasProperty("android")) {
                artifact("$buildDir/outputs/aar/" + project.getName() + "-release.aar")
            } else {
                artifact("$buildDir/libs/" + project.getName() + ".jar")
            }

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', POM_NAME)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', POM_URL)

                def scm = root.appendNode('scm')
                scm.appendNode('url', POM_SCM_URL)
                scm.appendNode('connection', POM_SCM_CONNECTION)
                scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', POM_LICENCE_NAME)
                license.appendNode('url', POM_LICENCE_URL)
                license.appendNode('distribution', POM_LICENCE_DIST)

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', POM_DEVELOPER_ID)
                developer.appendNode('name', POM_DEVELOPER_NAME)

                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                ext.addDependency = { Dependency dep, String scope ->
                    if ('unspecified' != dep.name) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (rootProject.name == dep.group) {
                            dependencyNode.appendNode('groupId', POM_GROUP)
                        } else {
                            dependencyNode.appendNode('groupId', dep.group)
                        }
                        dependencyNode.appendNode('artifactId', dep.name)
                        if ('unspecified' == dep.version) {
                            dependencyNode.appendNode('version', VERSION_NAME)
                        } else {
                            dependencyNode.appendNode('version', dep.version)
                        }
                        dependencyNode.appendNode('scope', scope)
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                if (project.hasProperty("android")) {
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
    repositories {
        maven {
            url uri('../repo')
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false // add this line
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}


def getBintrayUserProperty() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
}

def getBintrayApiKeyProperty() {
    return hasProperty('BINTRAY_APIKEY') ? BINTRAY_APIKEY : ""
}

def getGpgPassphraseProperty() {
    return hasProperty('GPG_PASSPHRASE') ? GPG_PASSPHRASE : ""
}

def getUserTokenProperty() {
    return hasProperty('USERTOKEN') ? USERTOKEN : ""
}

def getUserPasswordProperty() {
    return hasProperty('USERPASSWORD') ? USERPASSWORD : ""
}

// gradle bintrayUpload
bintray {
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()
    def passphrase = getGpgPassphraseProperty()
    def userToken = getUserTokenProperty()
    def userPassword = getUserPasswordProperty()
    publications = ['maven']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'xrouter-'+project.getName()
        desc = POM_NAME
        userOrg = 'xiaoman-team'
        websiteUrl = POM_URL
        issueTrackerUrl = POM_ISSUE_URL
        vcsUrl = POM_URL
        licenses = ['Apache-2.0']
        labels = ['android', 'aar']
        publicDownloadNumbers = true

        version {
            name = VERSION_NAME
            vcsTag = VERSION_NAME
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                //Optional (true by default). Determines whether to sync the version to Maven Central.
                sync = false
                user = userToken //OSS user token
                password = userPassword //OSS user password
                close = '1'
            }
        }
    }
}