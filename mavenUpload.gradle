apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {

            groupId = POM_GROUP
            artifactId = project.getName()
            version = VERSION_NAME

            artifact(sourcesJar)
            artifact(javadocJar)
            if (project.hasProperty("android")) {
                artifact("$buildDir/outputs/aar/" + project.getName() + "-release.aar")
            } else {
                artifact("$buildDir/libs/" + project.getName() + ".jar")
            }

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', POM_NAME)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', POM_URL)

                def scm = root.appendNode('scm')
                scm.appendNode('url', POM_SCM_URL)
                scm.appendNode('connection', POM_SCM_CONNECTION)
                scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', POM_LICENCE_NAME)
                license.appendNode('url', POM_LICENCE_URL)
                license.appendNode('distribution', POM_LICENCE_DIST)

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', POM_DEVELOPER_ID)
                developer.appendNode('name', POM_DEVELOPER_NAME)

                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (!'unspecified'.equals(it.name)) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (rootProject.name.equals(it.group)) {
                            dependencyNode.appendNode('groupId', POM_GROUP)
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                        }
                        dependencyNode.appendNode('artifactId', it.name)
                        if ('unspecified'.equals(it.version)) {
                            dependencyNode.appendNode('version', VERSION_NAME)
                        } else {
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
//        maven {
//            url uri('../repo')
//        }
        maven {
            url { isReleaseBuild() ? RELEASE_REPOSITORY_URL : SNAPSHOT_REPOSITORY_URL }

            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
            authentication {
                basic(BasicAuthentication)
//                digest(DigestAuthentication)
            }
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false // add this line
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}


def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}